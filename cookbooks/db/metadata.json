{
  "platforms": {
  },
  "description": "RightScale Database Manager",
  "suggestions": {
  },
  "conflicting": {
  },
  "recipes": {
    "db::handle_demote_master": "Remote recipe executed by do_promote_to_master. DO NOT RUN.",
    "db::do_tag_as_master": "USE WITH CAUTION! Tag server with master tags and set master DNS to this server.",
    "db::do_restore": "Restores the database from the most recently completed backup available in persistent storage of the current cloud.",
    "db::do_init_slave": "Initialize MySQL Slave",
    "db::setup_monitoring": "Installs the collectd plugin for database monitoring support, which is required to enable monitoring and alerting functionality for your servers.",
    "db::do_restore_and_become_master": "Restore MySQL database.  Tag as Master.  Set Master DNS.  Kick off a fresh backup from this master.",
    "db::request_appserver_allow": "Sends a request to allow connections from the caller's private IP address to all database servers in the deployment that are tagged with the database:active=true tag. This should be run on an application server before attempting a database connection.",
    "db::request_master_deny": "Sends a request to the master database server tagged with rs_dbrepl:master_instance_uuid=<master_instance_uuid> to deny connections from the server's private IP address.  This script should be run on a slave when it stops replicating.",
    "db::setup_replication_privileges": "Set up privileges for MySQL replication slaves.",
    "db::setup_master_dns": "USE WITH CAUTION! Set master DNS to this server's IP",
    "db::do_secondary_backup": "Creates a backup of the database and uploads it to a secondary cloud storage location, which can be used to migrate your database to a different cloud.  For example, you can save a secondary backup to an AWS S3 bucket or a Rackspace CloudFiles container.",
    "db::setup_block_device": "Relocates the database data directory onto a block_device that supports snapshot backup and restore functionality. This script should be run on a newly operational server before it get placed into production.",
    "db::default": "Adds the database:active=true tag to your server which identifies it as an database server. The tag is used by application servers to identify active databases. It also loads the required 'db' resources.",
    "db::do_secondary_restore": "Restores the database from the most recently completed backup available in a secondary location.",
    "db::do_backup": "Creates a backup of the database using persistent storage in the current cloud.  On Rackspace, LVM backups are uploaded to the specified CloudFiles container.  For all other clouds, volume snapshots (like EBS) are used.",
    "db::install_server": "Installs and sets up the packages that are required for database servers.",
    "db::do_appservers_allow": "Allows connections from all application servers in the deployment that are tagged with appserver:active=true tag. This script should be run on a database server so that it will accept connections from application servers.",
    "db::do_backup_schedule_enable": "Enables db::do_backup to be run periodically.",
    "db::install_client": "Installs the database client onto the VM so that it can connect to a running server.  It should be set up on all database servers and servers intended to connect to the servers.",
    "db::do_force_reset": "Resets the database back to a pristine state. WARNING: Execution of this script will delete any data in your database!",
    "db::setup_privileges_admin": "Adds the username and password for 'superuser' privileges.",
    "db::do_backup_schedule_disable": "Disables db::do_backup from being run periodically.",
    "db::request_master_allow": "Sends a request to the master database server tagged with rs_dbrepl:master_instance_uuid=<master_instance_uuid> to allow connections from the server's private IP address.  This script should be run on a slave before it sets up replication.",
    "db::do_promote_to_master": "Promote a replicating slave to master",
    "db::do_init_slave_at_boot": "Initialize MySQL Slave at boot.",
    "db::request_appserver_deny": "Sends a request to deny connections from the caller's private IP address to all database servers in the deployment that are tagged with the database:active=true tag. This should be run on an application server upon decommissioning.",
    "db::do_appservers_deny": "Denies connections from all application servers in the deployment that are tagged with appserver:active=true tag.  This script can be run on a database server to deny connections from all application servers in the deployment.",
    "db::setup_privileges_application": "Adds the username and password for application privileges."
  },
  "long_description": "= RightScale Database Manager\n\n== DESCRIPTION:\n\nThis cookbook provides a set of database recipes used by the RightScale \nDatabase Manager ServerTemplates.\n\nThis cookbook does not contain a specific database implementation, rather \nit provides an interface for general database actions and parameters.\n\n\n== DETAILS:\n\n=== General\nThe 'db' interface is defined by a Lightweight Resource, which can be found in\nthe resources/default.rb file.\n\nThis cookbook is intended to be used in conjunction with cookbooks that contain\nLightweight Providers which implement the 'db' interface. See the RightScale \ndb_mysql or db_postgres cookbook for an example.\n\nFor more about Lightweight Resources and Providers (LWRPs), please see the Chef\nwiki at:\n  \n  http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29\n  \n=== Backup/Restore\nThis cookbook depends on the block_device LWRP for backup and restore \nactions.  See db::do_backup and db::do_restore recipes for examples.  The \nblock_device cookbook in RightScale's cookbooks_premium repository\nprovides primary and secondary persistence solutions for multiple clouds.\n\nHowever, using LWRPs one can provide their own block_device implementation\ninstead.  \n\nPlease see RightScale's premium block_device cookbook for the list of \navailable actions, attributes and usage.\n\n      \n== REQUIREMENTS:\n\n* Must be used with a 'db' provider in the cookbook path.\n* Depends on a 'block_device' resource for backup and restore recipes. \n\n     \n== SETUP:\n   \n* Place db::default recipe into your runlist to setup the db resource.  When\n  using a RightScale ServerTemplate, this will also automatically add the \n  common database attributes to your ServerTemplate inputs.\n   \n* The default recipe for the cookbook that contains the db provider must also\n  be added to your runlist. For example:\n  \n    db_mysql::default or db_postgres::default\n    \n  This will load your provider and pull in any database specific attributes \n  as inputs.\n\n== USAGE:\n\n=== Initialize a master database:\n\n1. Once your VMs is operational, run the:\n   \n    \"db::setup_block_device\"\n    \n   recipe. This will initialize your database onto a block device\n   that supports backup and restore operations. \n2. Initialize your database from previous dumpfile or other source.\n3. Register your database with a Dynamic DNS provider using:\n\n    \"sys_dns::do_set_private\"\n   \n   to allow you application servers to start making connections.\n4. Backup your database using:\n\n    \"db:do_backup\"\n    \n   to allow restoring the master database in case of failure or\n   planned termination.\n   \n=== Restore a master database:\n\n1. Once your VMs is operational, run the:\n   \n    \"db::do_restore\"\n    \n   recipe. This will restore your database from a backup previously saved to\n   persistent cloud storage. \n3. Register your database with a Dynamic DNS provider using:\n\n    \"sys_dns::do_set_private\"\n   \n   to allow you application servers to start making connections.\n\n\n== KNOWN LIMITATIONS:\n\n* Currently only one db provider should be present in your cookbook path.\n* The 'appserver_allow' and 'appserver_deny' recipes require VMs managed \n  by the RightScale platform to run.\n  \n   \n== PROVIDERS:\n\nWhen writing your own database Lightweight Provider:\n\n* The database provider to use is defined by node[:db][:provider] attribute, \n  you will need to override this. You can do so by adding: \n   \n    set[:db][:provider] = \"db_myprovider\"\n    \n  in the attributes file of your provider cookbook.\n  \n* Any database specific attributes that you wish to make user configurable \n  should be added to the cookbook metadata with the default recipe included in\n  the attribute's 'recipes' array.  For more about Chef metadata, please see\n  the Chef wiki at:\n  \n    http://wiki.opscode.com/display/chef/Metadata\n   \n* Your provider cookbook metadata should depend on this cookbook by\n  added a 'depends' line to your metadata. For example:\n  \n    depends \"db\"\n    \n\n",
  "providing": {
  },
  "version": "0.2.0",
  "attributes": {
    "db/init_slave_at_boot": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "true",
        "false"
      ],
      "default": "false",
      "type": "string",
      "recipes": [
        "db::do_init_slave_at_boot"
      ],
      "display_name": "Init Slave at Boot",
      "description": "Set to 'True' for the instance to initialize the database server as a slave at boot time.   Set to 'False' if there is no Master-DB server running. "
    },
    "db/application/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default",
        "db::setup_privileges_application"
      ],
      "display_name": "Database Application Password",
      "description": "The password of the database user that has 'user' privileges."
    },
    "db/admin/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::install_server",
        "db::setup_privileges_admin"
      ],
      "display_name": "Database Admin Password",
      "description": "The password of the database user that has 'admin' privileges."
    },
    "db/backup/slave/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_backup_schedule_enable"
      ],
      "display_name": "Slave Backup Cron Hour",
      "description": "By default, backup EBS Snapshots of the Slave database are taken hourly. (Ex: *)"
    },
    "db/backup/secondary_container": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_secondary_backup",
        "db::do_secondary_restore"
      ],
      "display_name": "Secondary Backup Container",
      "description": "Container for secondary backups. Used by db::do_secondary_backup and db::do_secondary_restore to backup to persistent storage outside of the current cloud. For example, you can specify the name of an AWS S3 bucket or Rackspace CloudFiles container."
    },
    "db/backup/secondary_location": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "S3",
        "CloudFiles"
      ],
      "default": "S3",
      "type": "string",
      "recipes": [
        "db::do_secondary_backup",
        "db::do_secondary_restore"
      ],
      "display_name": "Secondary Backup Location",
      "description": "Location for secondary backups. Used by db::do_secondary_backup and db::do_secondary_restore to backup to persistent storage outside of the current cloud. For example, you can specify the name of an AWS S3 bucket or Rackspace CloudFiles container."
    },
    "db/provider": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "db_mysql",
        "db_postgres"
      ],
      "default": "db_mysql",
      "type": "string",
      "recipes": [
        "db::default"
      ],
      "display_name": "Database Provider",
      "description": "The database provider for the Master Database."
    },
    "db/backup/master/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_backup_schedule_enable"
      ],
      "display_name": "Master Backup Cron Minute",
      "description": "Defines the minute of the hour when the backup EBS snapshot will be taken of the Master database.  Backups of the Master are taken daily.  By default, a minute will be randomly chosen at launch time.  The time of the backup is defined by 'Master Backup Cron Hour' and 'Master Backup Cron Minute'.  Uses standard crontab format. (Ex: 30) for the 30th minute of the hour."
    },
    "db/application/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default",
        "db::setup_privileges_application"
      ],
      "display_name": "Database Application Username",
      "description": "The username of the database user that has 'user' privileges."
    },
    "db/admin/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::install_server",
        "db::setup_privileges_admin"
      ],
      "display_name": "Database Admin Username",
      "description": "The username of the database user that has 'admin' privileges."
    },
    "db/backup/lineage": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_init_slave",
        "db::do_promote_to_master",
        "db::do_restore_and_become_master",
        "db::do_backup",
        "db::do_restore",
        "db::do_backup_schedule_enable",
        "db::do_backup_schedule_disable",
        "db::setup_block_device",
        "db::do_force_reset",
        "db::do_secondary_backup",
        "db::do_secondary_restore"
      ],
      "display_name": "Backup Lineage",
      "description": "The prefix that will be used to name/locate the backup of a particular database."
    },
    "db/replication/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::setup_replication_privilege",
        "db::do_restore_and_become_master",
        "db::do_promote_to_master"
      ],
      "display_name": "Database Replication Password",
      "description": "The password of the database user that has 'replciation' privileges."
    },
    "db/fqdn": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default"
      ],
      "display_name": "Database Master FQDN",
      "description": "The fully qualified domain name for the Master Database."
    },
    "db": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "hash",
      "recipes": [

      ],
      "display_name": "General Database Options"
    },
    "db/replication/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::setup_replication_privilege",
        "db::do_restore_and_become_master",
        "db::do_promote_to_master"
      ],
      "display_name": "Database Replication Username",
      "description": "The username of the database user that has 'replciation' privileges."
    },
    "db/backup/slave/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_backup_schedule_enable"
      ],
      "display_name": "Slave Backup Cron Minute",
      "description": "Defines the minute of the hour when the backup EBS snapshot will be taken of the Slave database.  Backups of the Slave are taken hourly.  By default, a minute will be randomly chosen at launch time.  Uses standard crontab format. (Ex: 30) for the 30th minute of the hour."
    },
    "db/backup/master/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_backup_schedule_enable"
      ],
      "display_name": "Master Backup Cron Hour",
      "description": "Defines the hour of the day when the backup EBS snapshot will be taken of the Master database.  Backups of the Master are taken daily.  By default, an hour will be randomly chosen at launch time.  The time of the backup is defined by 'Master Backup Cron Hour' and 'Master Backup Cron Minute'.  Uses standard crontab format. (Ex: 23) for 11pm."
    },
    "db/backup/timestamp_override": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_restore",
        "db::do_secondary_restore"
      ],
      "display_name": "Restore Timestamp Override",
      "description": "An optional variable to restore from a specific timestamp. You must specify a string that matches the timestamp tag on the volume snapshot.  You will need to specify the timestamp that's defined by the snapshot's tag (not the name).  For example, if the snapshot's tag is 'rs_backup:timestamp=1303613371' you would specify '1303613371' for this input."
    }
  },
  "maintainer": "RightScale, Inc.",
  "replacing": {
  },
  "license": "Copyright (c) 2011 RightScale, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "maintainer_email": "support@rightscale.com",
  "name": "db",
  "groupings": {
  },
  "dependencies": {
    "db_mysql": [

    ],
    "db_postgres": [

    ],
    "sys_firewall": [

    ],
    "block_device": [

    ],
    "rs_utils": [

    ]
  },
  "recommendations": {
  }
}